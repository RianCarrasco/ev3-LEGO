# Motor.run(speed)
# Faz o motor girar continuamente a uma certa velocidade.
# Argumento:
# - speed: Velocidade em graus por segundo (int).

# Motor.run_angle(speed, angle, then=Stop.HOLD, wait=True)
# Gira o motor a uma velocidade definida até atingir um determinado ângulo.
# Argumentos:
# - speed: Velocidade em graus por segundo (int).
# - angle: Ângulo total a ser girado em graus (int).
# - then: Ação após o movimento (Stop).
# - wait: Se o programa deve aguardar o movimento (bool).

# Motor.run_target(speed, target_angle, then=Stop.HOLD, wait=True)
# Move o motor para uma posição angular específica a uma certa velocidade.
# Argumentos:
# - speed: Velocidade em graus por segundo (int).
# - target_angle: Ângulo de destino em graus (int).
# - then: Ação após o movimento (Stop).
# - wait: Se o programa deve aguardar o movimento (bool).

# Motor.stop(then=Stop.HOLD)
# Para o motor.
# Argumento:
# - then: Ação após parar (Stop).

# Motor.dc(duty_cycle)
# Controla diretamente o motor definindo um ciclo de trabalho.
# Argumento:
# - duty_cycle: Ciclo de trabalho como uma porcentagem (-100 a 100) (int).

# InfraredSensor.distance()
# Mede a distância do objeto em frente ao sensor infravermelho.
# Retorna a distância em milímetros (int).

# InfraredSensor.buttons(channel)
# Retorna os botões pressionados no sensor remoto de infravermelho.
# Argumento:
# - channel: Canal do controle remoto (int).
# Retorna uma lista de botões pressionados.

# EV3Brick.speaker.play_file(file_name)
# Reproduz um arquivo de som no brick EV3.
# Argumento:
# - file_name: O nome do arquivo de som (SoundFile).

# EV3Brick.speaker.beep(frequency=500, duration=100, volume=100)
# Emite um som "beep" no brick EV3.
# Argumentos:
# - frequency: Frequência do som em Hz (int).
# - duration: Duração do beep em milissegundos (int).
# - volume: Volume do som (0 a 100) (int).

# EV3Brick.screen.load_image(image_file)
# Carrega e exibe uma imagem na tela do EV3.
# Argumento:
# - image_file: O arquivo de imagem (ImageFile).

# EV3Brick.buttons.pressed()
# Retorna uma lista de botões pressionados no EV3.
# Motor.reset_angle(angle)
# Redefine o ângulo do motor para um valor específico.
# Argumento:
# - angle: O novo valor do ângulo em graus (int).

# Motor.angle()
# Retorna o ângulo atual do motor.
# Retorna o ângulo em graus (int).

# Motor.stall()
# Verifica se o motor está emperrado.
# Retorna True se estiver emperrado, False caso contrário (bool).

# Motor.speed()
# Retorna a velocidade atual do motor em graus por segundo.
# Retorna a velocidade em graus por segundo (int).

# Motor.control.limits(speed, acceleration, torque)
# Define limites para a velocidade, aceleração e torque do motor.
# Argumentos:
# - speed: Limite máximo de velocidade (graus por segundo).
# - acceleration: Limite máximo de aceleração (graus por segundo²).
# - torque: Limite máximo de torque (newton-metros).

# InfraredSensor.proximity()
# Retorna uma leitura aproximada da proximidade de objetos.
# Retorna um valor de proximidade de 0 a 100 (int).

# InfraredSensor.beacon(channel)
# Retorna True se o botão do modo "beacon" estiver sendo pressionado.
# Argumento:
# - channel: O canal do controle remoto (int).

# ColorSensor.color()
# Detecta a cor atual sob o sensor de cor.
# Retorna um valor da enumeração Color (Color.BLACK, Color.WHITE, etc.).

# ColorSensor.reflection()
# Mede a intensidade da luz refletida.
# Retorna um valor de 0 a 100% (int).

# ColorSensor.ambient()
# Mede a luz ambiente ao redor do sensor de cor.
# Retorna um valor de 0 a 100% (int).

# GyroSensor.angle()
# Retorna o ângulo atual medido pelo giroscópio.
# Retorna o ângulo em graus (int).

# GyroSensor.speed()
# Retorna a velocidade angular atual.
# Retorna a velocidade em graus por segundo (int).

# GyroSensor.reset_angle(angle)
# Redefine o ângulo do giroscópio para um valor específico.
# Argumento:
# - angle: O novo valor do ângulo em graus (int).

# TouchSensor.pressed()
# Verifica se o sensor tátil está sendo pressionado.
# Retorna True se estiver pressionado, False caso contrário (bool).

# UltrasonicSensor.distance()
# Mede a distância até o objeto mais próximo em milímetros.
# Retorna a distância em milímetros (int).

# UltrasonicSensor.presence()
# Detecta a presença de um objeto próximo.
# Retorna True se houver um objeto próximo, False caso contrário (bool).

# wait(time)
# Faz o programa aguardar por um tempo específico.
# Argumento:
# - time: O tempo em milissegundos (int).

# Stop (Constante)
# Modo de parada do motor. Pode ser:
# - Stop.COAST: Deixa o motor continuar girando livremente.
# - Stop.BRAKE: Para o motor imediatamente, sem segurar a posição.
# - Stop.HOLD: Para o motor e mantém a posição.

# Button (Constante)
# Enumeração que define os botões do EV3. Exemplos:
# - Button.CENTER: Botão central.
# - Button.LEFT: Botão esquerdo.
# - Button.RIGHT: Botão direito.
